"""
M√≥dulo de Verifica√ß√£o de Token para Plataforma Clint
Respons√°vel por: Capturar token do BigQuery e preencher c√≥digo de verifica√ß√£o
"""

from funcoes import capturar_codigo_acesso_client
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import os
import sys

# Adicionar o diret√≥rio utils ao path para importa√ß√£o
utils_path = os.path.join(os.path.dirname(
    os.path.abspath(__file__)), '..', '..', 'utils')
sys.path.append(utils_path)

# Importar ap√≥s configurar o path (como no clint_login_plataforma.py)


def aguardar_campos_codigo(driver, timeout=90):
    """
    Aguarda os campos de c√≥digo de verifica√ß√£o aparecerem

    Args:
        driver: Driver do Selenium logado
        timeout (int): Tempo m√°ximo de espera em segundos

    Returns:
        list: Lista de elementos de input encontrados, ou None se falhar
    """
    try:
        print("üîç Aguardando campos de c√≥digo de verifica√ß√£o...")

        wait = WebDriverWait(driver, timeout)

        for _ in range(timeout):
            code_inputs = driver.find_elements(
                By.CSS_SELECTOR, "input[type='tel']")

            if len(code_inputs) == 6:
                print("‚úÖ Campos de c√≥digo encontrados!")
                return code_inputs

            time.sleep(1)

        print("‚ùå Campos de c√≥digo de verifica√ß√£o n√£o encontrados.")
        return None

    except Exception as e:
        print(f"‚ùå Erro ao aguardar campos de c√≥digo: {e}")
        return None


def preencher_codigo_verificacao(driver, code_inputs, token_value):
    """
    Preenche o c√≥digo de verifica√ß√£o nos campos

    Args:
        driver: Driver do Selenium
        code_inputs: Lista de elementos de input
        token_value: Token capturado do BigQuery

    Returns:
        bool: True se preenchimento bem-sucedido, False caso contr√°rio
    """
    try:
        print("üîê Preenchendo c√≥digo de verifica√ß√£o...")

        # Extrair apenas os d√≠gitos do token
        code_digits = [c for c in token_value if c.isdigit()]

        if len(code_digits) < 6:
            print(f"‚ùå Token inv√°lido (muito curto): {token_value}")
            return False

        # Preencher cada campo
        for i, input_elem in enumerate(code_inputs):
            input_elem.clear()
            input_elem.send_keys(code_digits[i])
            time.sleep(0.5)

        print("‚úÖ C√≥digo de verifica√ß√£o preenchido nos campos.")
        return True

    except Exception as e:
        print(f"‚ùå Erro ao preencher c√≥digo de verifica√ß√£o: {e}")
        return False


def clicar_botao_continuar(driver):
    """
    Clica no bot√£o 'Continuar' ap√≥s preenchimento do c√≥digo

    Args:
        driver: Driver do Selenium

    Returns:
        bool: True se clique bem-sucedido, False caso contr√°rio
    """
    try:
        print("üîÑ Clicando no bot√£o 'Continuar'...")

        wait = WebDriverWait(driver, 10)
        continuar_btn = wait.until(EC.element_to_be_clickable(
            (By.CSS_SELECTOR, "button.btn.btn-success.btn-block")))

        continuar_btn.click()
        print("‚úÖ Bot√£o 'Continuar' clicado com sucesso!")

        # Aguardar redirecionamento e verificar se a sess√£o foi mantida
        print("‚è≥ Aguardando redirecionamento ap√≥s verifica√ß√£o...")
        time.sleep(10)  # Aumentar tempo de espera para processo de verifica√ß√£o

        # Verificar se ainda estamos na p√°gina de login (erro) ou se fomos redirecionados
        current_url = driver.current_url
        print(f"üìç URL atual ap√≥s verifica√ß√£o: {current_url}")

        if "login" in current_url:
            print("‚ö†Ô∏è Ainda na p√°gina de login - verifica√ß√£o pode ter falhado")
            print("üîÑ Tentando clicar novamente no bot√£o...")

            # Tentar clicar novamente no bot√£o
            try:
                continuar_btn = wait.until(EC.element_to_be_clickable(
                    (By.CSS_SELECTOR, "button.btn.btn-success.btn-block")))
                continuar_btn.click()
                print("‚úÖ Bot√£o 'Continuar' clicado novamente!")
                time.sleep(15)  # Aguardar mais tempo

                current_url = driver.current_url
                print(f"üìç URL atual ap√≥s segunda tentativa: {current_url}")

                if "login" in current_url:
                    print("‚ùå Ainda na p√°gina de login ap√≥s segunda tentativa")
                    return False
            except:
                print("‚ùå N√£o foi poss√≠vel clicar novamente no bot√£o")
                return False

        # Aguardar p√°gina carregar completamente
        print("‚è≥ Aguardando p√°gina carregar ap√≥s verifica√ß√£o...")
        wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
        time.sleep(5)

        print("‚úÖ Redirecionamento conclu√≠do e sess√£o mantida!")
        return True

    except Exception as e:
        print(f"‚ö†Ô∏è N√£o foi poss√≠vel clicar no bot√£o 'Continuar': {e}")
        return False


def verificar_token_completo(driver):
    """
    Executa o processo completo de verifica√ß√£o de token

    Args:
        driver: Driver do Selenium logado

    Returns:
        bool: True se verifica√ß√£o bem-sucedida, False caso contr√°rio
    """
    try:
        print("üöÄ Iniciando verifica√ß√£o de token...")

        # Capturar token do BigQuery
        token_value = capturar_codigo_acesso_client()

        if not token_value:
            print("‚ùå Falha ao capturar token do BigQuery")
            return False

        print(f"‚úÖ Token capturado: {token_value[:10]}...")

        # Aguardar campos de c√≥digo
        code_inputs = aguardar_campos_codigo(driver)
        if not code_inputs:
            return False

        # Preencher c√≥digo de verifica√ß√£o
        if not preencher_codigo_verificacao(driver, code_inputs, token_value):
            return False

        # Clicar no bot√£o continuar
        if not clicar_botao_continuar(driver):
            print("‚ö†Ô∏è Bot√£o continuar n√£o clicado, mas processo pode ter funcionado")

        print("üéâ Verifica√ß√£o de token conclu√≠da com sucesso!")
        return True

    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o de token: {e}")
        return False


def executar_verificacao_token(driver):
    """
    Fun√ß√£o principal para executar verifica√ß√£o de token

    Args:
        driver: Driver do Selenium logado

    Returns:
        driver: Driver com verifica√ß√£o conclu√≠da, ou None se falhar
    """
    try:
        if not verificar_token_completo(driver):
            print("‚ùå Falha na verifica√ß√£o de token")
            return None

        print("‚úÖ Processo de verifica√ß√£o de token finalizado!")
        return driver

    except Exception as e:
        print(f"‚ùå Erro no processo de verifica√ß√£o: {e}")
        return None


if __name__ == "__main__":
    # Teste do m√≥dulo (requer driver j√° logado)
    print("üß™ Teste do m√≥dulo de verifica√ß√£o de token")
    print("‚ö†Ô∏è Este m√≥dulo requer um driver j√° logado na Clint")
    print("üí° Execute atrav√©s do main principal")
